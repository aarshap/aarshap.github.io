{"componentChunkName":"component---src-templates-blog-js","path":"/blog/on-relearning-to-code","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"On Relearning to Code\",\n  \"date\": \"2021-01-12\",\n  \"dek\": \"How I finally learned (some) React for the relaunch of my website.\",\n  \"category\": \"Code\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar ArticleMedia = makeShortcode(\"ArticleMedia\");\nvar Image = makeShortcode(\"Image\");\nvar Link = makeShortcode(\"Link\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I'm a product designer \\u2013 whatever that means.\"), mdx(\"p\", null, \"With a profession as vaguely defined as ours, people are identified by their skillsets. Product designers are researchers, illustrators, architects, and animators. Some of us become managers or communicators. I grew up writing bad HTML in the Geocities era and while I eventually studied graphic design, my goal was to be a website \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"builder\"), \". Technical proficiency has always been important to me. My work is informed by how it's built as much as what it provides to its audience.\"), mdx(\"p\", null, \"Our skills aren't permanent. Technology moves fast. Research methods change. Styles evolve. Languages and frameworks emerge. I spent four years at VICE doing what the team needed me to do \\u2013 designing mockups, advocating for our product throughout the company, and eventually managing our team. Coding was best left to the engineers because I was more efficient elsewhere. While I never stopped identifying as \\u201Ctechnical,\\u201D I got rusty. So when I left VICE in September, it was time to relearn to code.\"), mdx(\"h3\", {\n    \"id\": \"building-on-gatsby\"\n  }, \"Building on Gatsby\"), mdx(\"p\", null, \"My previous site was built with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://middlemanapp.com/\"\n  }), \"Middleman\"), \" \\u2013 a Ruby-based static site generator (SSG) I learned in 2015. An SSG was perfect for a website updated as infrequently as mine. I defined simple logic and page templates locally, but it compiled to simple HTML, CSS, and JavaScript. Because it was static, I hosted it subscription-free on Github pages.\"), mdx(\"p\", null, \"But like I said, our industry moves fast. Middleman felt ancient compared to the tools I watched our engineers use at VICE. When I learned about \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.com/\"\n  }), \"Gatsby\"), \" \\u2013 a more contemporary React-based SSG, I decided to give it a try.\"), mdx(ArticleMedia, {\n    caption: \"Gatsby\",\n    mdxType: \"ArticleMedia\"\n  }, mdx(Image, {\n    src: \"images/blog/on_relearning_to_code/gatsby_homepage.png\",\n    alt: \"Gatsby\",\n    className: \"has-shadow\",\n    mdxType: \"Image\"\n  })), mdx(\"p\", null, \"I never \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"really\"), \" learned JavaScript. Libraries like jQuery simplified basic interactions while obfuscating what was actually happening in the browser. Relying on those libraries limited my work to what was available with plugins and Stack Overflow answers.\"), mdx(\"p\", null, \"Gatsby similarly obfuscates routing, image handling, and creating pages. This is a huge benefit \\u2013 I've come to learn those things can be tedious \\u2013 but it\\u2019s important to learn rules before breaking them. As I was building the components that make up this site, I still didn\\u2019t understand foundational React concepts like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/state-and-lifecycle.html\"\n  }), \"state\"), \". Pages were rendering and rerendering in unexpected ways. Tutorials were hard to follow because they assumed a level of knowledge I was lacking.\"), mdx(\"p\", null, \"So I stepped back and started from the beginning. I studied \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.w3schools.com/react/react_es6.asp\"\n  }), \"ES6\"), \" to understand how to correctly write a loop or a function in React - even if classic JavaScript syntax still worked. I completed \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://scrimba.com/learn/learnreact/\"\n  }), \"Bob Ziroll's Scrimba course\"), \" and watched most of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://youtu.be/4UZrsTqkcW4\"\n  }), \"freeCodeCamp's YouTube course\"), \" to fill gaps.\"), mdx(\"p\", null, \"Shortcuts are great for implementing one-off interactions, but learning fundamentals eventually pays off.\"), mdx(\"h3\", {\n    \"id\": \"unlearning-old-habits-with-styled-components\"\n  }, \"Unlearning old habits with Styled Components\"), mdx(\"p\", null, \"After seeing our codebase bloat at Etsy, I developed techniques for structuring scalable CSS. We organized our code and files using agreed-upon rules. We wrote generic, highly specific classes that could be used across components. It was highly opinionated and we had to fight to ensure other contributors stuck to our guidelines. So when I saw \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.com/docs/tutorial/part-two/\"\n  }), \"Gatsby recommended CSS-in-JS\"), \", I scoffed. It seemed like an over engineered solution to a problem that could be solved with planning and restraint.\"), mdx(ArticleMedia, {\n    caption: \"Styled Components\",\n    mdxType: \"ArticleMedia\"\n  }, mdx(Image, {\n    src: \"images/blog/on_relearning_to_code/styled_components_homepage.png\",\n    alt: \"Styled Components homepage\",\n    className: \"has-shadow\",\n    mdxType: \"Image\"\n  })), mdx(\"p\", null, \"I mean, look at that syntax! It's practically CSS. Why not just use CSS?\"), mdx(\"p\", null, \"So I started by writing CSS like I've alwaysd done. I created a global stylesheet. When I designed new components, I adjusted old components to work with new styles. But like they usually do, components broke. Exceptions emerged. Scope leaked. I found myself spending as much time refactoring old CSS as much as I was writing new CSS.\"), mdx(\"p\", null, \"Eventually I tried \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://styled-components.com/\"\n  }), \"Styled Components\"), \" and hey, it rocks. Scoping CSS to a single component is something I'd always manually solved through namespacing and restraint. With Styled Components, I'm able to use simple, semantic names without worrying about how they affect styles in other components.\"), mdx(\"p\", null, \"My card component's styles look something like this, for example.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const Wrapper = styled.div`\\n    margin-bottom: 40px;\\n    &:last-child {\\n        margin-bottom: 0;\\n    }\\n`\\n\\nconst Title = styled.h3`\\n    margin-bottom: 8px;\\n`\\n\\nconst Description = styled.p`\\n    margin-bottom: 16px;\\n`\\n\")), mdx(\"p\", null, \"Those styles are then used to construct the component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import React from \\\"react\\\"\\nimport * as Styled from \\\"./styled\\\"\\nimport Button from \\\"../Button\\n\\nexport default (props) => {\\n    return (\\n        <Styled.Wrapper>\\n            <Title>{props.title}</Title>\\n            <Description>{props.description}</Description>\\n            <Button>{props.cta}</Button>\\n        </Styled.Wrapper>\\n    )\\n}\\n\")), mdx(\"p\", null, \"It's clean, too. Here\\u2019s how my styles are structured:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\uD83D\\uDCE6 src\\n  \\uD83D\\uDCC2 components\\n    \\uD83D\\uDCC2 Button\\n      \\uD83D\\uDCDC index.js\\n      \\uD83D\\uDCDC styled.js\\n    \\uD83D\\uDCC2 Nav\\n      \\uD83D\\uDCDC index.js\\n      \\uD83D\\uDCDC data.js\\n      \\uD83D\\uDCDC styled.js\\n    \\uD83D\\uDCC2 WorkCard\\n      \\uD83D\\uDCDC animations.js\\n      \\uD83D\\uDCDC index.js\\n      \\uD83D\\uDCDC styled.js\\n  \\uD83D\\uDCC2 styles\\n    \\uD83D\\uDCDC global.js\\n    \\uD83D\\uDCDC themes.js\\n\")), mdx(\"p\", null, \"Global styling for CSS variables and typography still exists. All other styles and animations are scoped to their respective components.\"), mdx(\"p\", null, \"Coolest of all, it let me define \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"themes.js\"), \" \\u2013 a file that stores light and dark theme values.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"export const light = {\\n    background: \\\"#FFFFFF\\\",\\n    link: {\\n        normal: \\\"#0000FF\\\",\\n        hover: \\\"#000000\\\"\\n    },\\n    ...\\n}\\n\\nexport const dark ={\\n    background: \\\"#171722\\\",\\n    link: {\\n        normal: \\\"#0085FF\\\",\\n        hover: \\\"#FFFFFF\\\"\\n    },\\n    ...\\n}\\n\")), mdx(\"p\", null, \"Individual components can ingest those values, which makes trivial to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://css-tricks.com/a-dark-mode-toggle-with-react-and-themeprovider/\"\n  }), \"create a theme switcher\"), \". Here's how it looks in my button component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const Button = styled.Link`\\n    color: ${props => props.theme.link.normal };\\n    ...\\n}\\n\")), mdx(\"p\", null, \"Like with CSS preprocessors, it's easy to overengineer solutions to problems. Relying on Styled Components for theming and scoping without writing too much JavaScript alongside my CSS was a nice middle ground.\"), mdx(\"h3\", {\n    \"id\": \"animating-with-framer-motion\"\n  }, \"Animating with Framer Motion\"), mdx(\"p\", null, \"I\\u2019ve used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.framer.com/\"\n  }), \"Framer\"), \" for design prototyping, but I wasn\\u2019t familiar with their \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.framer.com/motion/\"\n  }), \"motion library\"), \".\"), mdx(\"p\", null, \"Like with Styled Components, it's easy to be skeptical. You can write animations in CSS. CSS animations are tedious to write though \\u2013 especially if you want to tie them to JavaScript events or use complex easing.\"), mdx(\"p\", null, \"Framer Motion uses a dead simple syntax. Revealing an element on page load is as simple as this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const animation = {\\n    visible: { opacity: 1 },\\n    hidden: { opacity: 0 }\\n}\\n\\n...\\n\\n<motion.div\\n    initial=\\\"hidden\\\"\\n    animate=\\\"visible\\\"\\n    variants=\\\"animation\\\"\\n/>\\n\")), mdx(\"p\", null, \"You can easily tie those animations to hover states, gestures, or other JavaScript events. But these are still things you can technically accomplish with CSS. What convinced me to use Framer Motion was their \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.framer.com/api/motion/animate-presence/\"\n  }), \"AnimatePresence\"), \" feature.\"), mdx(\"p\", null, \"Animating components \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"in\"), \" is easy. CSS animations automatically trigger on newly mounted components. But from what I could tell, there's not a simple, native way to animate components \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"out\"), \". AnimatePresence gives your animations an \", mdx(\"code\", null, \"exit\"), \" prop. Your component is delayed from unmounting until after the prop's animation plays. In other words, the above animation look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const animation = {\\n    visible: { opacity: 1 },\\n    hidden: { opacity: 0 }\\n}\\n\\n...\\n\\n<motion.div\\n    initial=\\\"hidden\\\"\\n    animate=\\\"visible\\\"\\n    exit=\\\"hidden\\\"\\n    variants=\\\"animation\\\"\\n/>\\n\")), mdx(\"p\", null, \"By giving each of my animated components an \", mdx(\"code\", null, \"initial\"), \", \", mdx(\"code\", null, \"animate\"), \", and \", mdx(\"code\", null, \"exit\"), \" prop, pages transition in and out seamlessly. Seriously, it's that simple.\"), mdx(ArticleMedia, {\n    caption: \"In case you missed them\",\n    mdxType: \"ArticleMedia\"\n  }, mdx(\"video\", {\n    autoPlay: true,\n    muted: true,\n    loop: true,\n    className: \"has-shadow\"\n  }, mdx(\"source\", {\n    src: \"/blog/on_relearning_to_code/site_animations.mp4\",\n    type: \"video/mp4\"\n  }))), mdx(\"h3\", {\n    \"id\": \"not-all-problems-have-technical-solutions\"\n  }, \"Not all problems have technical solutions\"), mdx(\"p\", null, \"I wrote, rewrote, and refactored a lot of code over the last month. Learning new things is hard. Sometimes when your brain is in a fog you have to log off, tape a bedsheet to your wall, and turn your Covid-era apartment into a bootleg photo studio.\"), mdx(ArticleMedia, {\n    caption: \"Ingenuity\",\n    mdxType: \"ArticleMedia\"\n  }, mdx(Image, {\n    src: \"images/blog/on_relearning_to_code/bedsheet.jpg\",\n    alt: \"Bedsheet on my wall\",\n    className: \"has-shadow\",\n    mdxType: \"Image\"\n  })), mdx(\"p\", null, \"Despite how low-rent this looks, you too can have a \", mdx(Link, {\n    to: \"/info\",\n    mdxType: \"Link\"\n  }, \"dramatic headshot\"), \" for the price of one bedsheet.\"), mdx(\"h3\", {\n    \"id\": \"its-a-start\"\n  }, \"It's a start.\"), mdx(\"p\", null, \"I had a lot of fun going overboard for the sake of learning something new. Night mode was unnecessary. Recomposing my case studies in Markdown and serving them with GraphQL was unnecessary. Adding one line of jiggly text to my bio was \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"definitely\"), \" unnecessary, but it made me laugh. More features should be prioritized by whether they make someone laugh.\"), mdx(\"p\", null, \"Thanks for reading. To the engineers who caught me using a wrong word or two, please be nice to me. I'm fragile.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"On Relearning to Code","dek":"How I finally learned (some) React for the relaunch of my website.","date":"January 12th, 2021","category":"Code"}}},"pageContext":{"slug":"/blog/on-relearning-to-code","next":{"frontmatter":{"title":"Waiting","dek":"Because we should all have a pandemic time capsule to look back on."},"fields":{"slug":"/blog/waiting"}},"previous":null}},"staticQueryHashes":["3808394817","547143765","547143765","713810148","713810148"]}